function calc() # Simple calculator
{
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}


function mk() # Create a new directory and enter it
{
  mkdir -p "$@"
  cd "$@"
}

function cdls() # Show contents of the directory after changing to it
{
    builtin cd "$1"
    ls -ACF
}

function backup() # Backup files and folders
{
	$FILE=$1

	$DIRECTORY="$HOME/backup"
	# check if backup folder exists
	if [ ! -d "$DIRECTORY" ]; then
		mkdir $DIRECTORY
	fi

	# check if passed argument is file or directory
	if [[ -d $ ]]; then
		echo "$FILE is a directory"
	elif [[ -f $FILE ]]; then
		echo "$FILE is a file"
	else
		echo "$PASSED is not valid"
		exit 1
	fi

	# backup_name_template=

}

# Example linecount js
function linecount() # Count lines of a filw with specific extension
{
    find . -name "*.$1" | xargs wc -l
}

function man() # Shows pretty man page
{
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}


function targz() # Create a new directory and enter it
{
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

function cheat() # Cheatsheet function
{
  curl cheat.sh/${@:-cheat}
  # curl cheat.sh/$@
}

function cview() # Read csv file
{
	csvtool readable "$1" | view -
}


function short() # Shorten url
{
   url=$1
   curl http://tinyurl.com/api-create.php\?url\=$url
}

function kport() # Kill port
{
	kill $(lsof -t -i:$1)
}

function lowerDir # Lower case every file in current directory
{
	for i in *; do mv $i ${(L)i}; done
}

function findEmpty # Find empty files and directories in current directory
{
	find . -type f -exec bash -c 'if [ `cat "{}" |wc -w` -eq 0 ]; then echo "file - {}";fi' \; -or -empty -exec bash -c "echo dir - {}" \;
}

# from alex sexton   gist.github.com/SlexAxton/4989674
function gifify() # Create a new directory and enter it
{
  if [[ -n "$1" ]]; then
	if [[ $2 == '--good' ]]; then
	  ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
	  rm out-static*.png
	else
	  ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
	fi
  else
	echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# Git functions

function ghexport() # Download single folder from github
{
	github_link=$1
	remove_path="/tree/master"
  	link="${github_link/$remove_path/trunk/}"
	svn export ${link}
}

function clean_merged_branches()  # Delete all merged branches
{
    git branch --merged | grep -v "\*" | xargs -n 1 git branch -d
}

function gacp() # Git: add all, commit and push. [-m "comment"]
{
	git add .
	git commit "$@"
	git push
}

function ggs() # push & commit with message `update`
{
    git add -A
    git commit -m 'update'
    git push
}

function git-https # Git: Http to Https
{
	git remote set-url origin https://github.com/$(git remote get-url origin | sed 's/https:\/\/github.com\///' | sed 's/git@github.com://')
}

function git-ssh # Git: Https to SSH
{
	git remote set-url origin git@github.com:$(git remote get-url origin | sed 's/https:\/\/github.com\///' | sed 's/git@github.com://')
}


function gitignore() # Get .gitignore file for specific lang
{
	curl -sL "https://www.gitignore.io/api/$@" >> .gitignore
}

isup() # Check if URL is up
{
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		notify-send --urgency=critical "$uri is down"
	else
		notify-send --urgency=low "$uri is up"
	fi
}

function clean_comments # remove comments (#, //) and empty lines
{
	sed -i.tmp "/^s*[#;//]/d;/^$/d" $1
}

function ssh-key() # generate ssh key with specific name
{
    name="$@"
    ssh-keygen -f ~/.ssh/$name -q -N ""
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/$name
    xclip -selection clipboard < ~/.ssh/$name.pub
    echo "public key copied to clipboard"
}

# Python
function server() # Start an HTTP server from a directory
{
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}
function mkenv() # create python virtual environment
{
    if [ ! -d "pyenv" ]; then
        mkdir ~/pyenv
    fi

    cd ~/pyenv
    python3 -m venv "$1"
    source "$1"/bin/activate

		# install base packages
		pip install \
			black \
			flake8 \
			pylint

}

function json() # Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
{
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

function token # generate secret, token
{
	python -c 'import secrets; print(secrets.token_urlsafe(16))'
}

# ReactNative
function bapk() # build android apk (Must run inside react-native project)
{
    apk_path="./android/app/build/outputs/apk/debug"

	if [ ! -f package.json ]; then
		echo "package.json was not found. Run command inside root dir of your project."
		return 1
	fi

	if ! grep --quiet '"react-native":' package.json; then
		echo "Not a react-native project"
		return 1
	fi

	if [[ -d "./android/app/src/main" && ! -d "android/app/src/main/assets" ]]; then
		mkdir android/app/src/main/assets
	fi

	react-native bundle --platform android --dev false \
	                    --entry-file index.js \
	                    --bundle-output android/app/src/main/assets/index.android.bundle \
	                    --assets-dest android/app/build/intermediates/res/merged/release/ \
	                    && rm -rf android/app/src/main/res/drawable-* \
	                    && rm -rf android/app/src/main/res/raw/* \
	                    && cd android && ./gradlew assembleRelease && cd ..

	# open folder where apk file is stored
    xdg-open ${apk_path}
}

function rna() # clean cache & run react-native android simulator
{
    cd android && ./gradlew clean
    cd .. && react-native run-android
}

# Database related functions

# Postgres
function psql-create-db() # Create Postgres database
{
    db_name="$@"
    sudo -u postgres createdb $db_name
    sudo -u postgres psql -c "grant all privileges on database $db_name to $USER;" > /dev/null 2>&1
    echo "Database $db_name successfully created!"
}

function clone() # Clone repo and install dependencies
{
	git clone $1
	cd $(basename $1)

	if test -f "./package.json"; then
		echo "Installing NPM dependencies"
		npm install
		exit 0
	elif test -f "./pyproject.toml"; then
		echo "Installing Poetry dependencies"
		poetry install
		exit 0
	elif test -f "./requirements.txt"; then
		python3 -m venv .
		source venv/bin/activate
		pip install -r requirements.txt
		exit 0
	elif test -f "./composer.json"; then
		echo "Installing composer dependencies"
		composer install
		exit 0
	fi

}

function removebg() # Remove background from the image
{
	curl -H "X-API-Key: $REMOVEBG_KEY" \
       -F "image_file=@$1" \
       -F "size=auto" \
       -f https://api.remove.bg/v1.0/removebg -o no-bg.png
}


function bash-file() # Create new shell file
{
  FILE_PATH=$1
  mkdir -p -- $(dirname "$FILE_PATH") && touch -- "$FILE_PATH"
  echo '#!/usr/bin/env bash' >> "$FILE_PATH"
  echo '' >> "$FILE_PATH"
  chmod +x "$FILE_PATH"
}

function repl() # Launch Repl for specified language
{
	lang=$1

	if [ $lang = "python" ]; then
		lang="python3"
	elif [ $lang = "node" ]; then
		lang="nodejs"
	elif [ $lang = "java" ]; then
		lang="java10"
	elif [ $lang = "c#" ]; then
		lang="csharp"
	fi

	python -m webbrowser "https://replit.com/languages/$lang" &

}

function lorem () # Generate Loremipsum text
{

	if [ "${1}" = "" ] || [ "${2}" = "" ]; then
		echo "Usage: loremipsum [paragraphs, sentences] [integer]"
	else
		curl -s http://metaphorpsum.com/"${1}"/"${2}" && printf "\n"
	fi
}

function dataurl() # Create a data URL from a file
{
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Stopwatch, press enter to time.
# Source: http://superuser.com/questions/611538/is-there-a-way-to-display-a-countdown-or-stopwatch-timer-in-a-terminal
stopwatch() {
	date1=$(date +%s);
	while :; do
		days=$(( $(($(date +%s) - date1)) / 86400 ))
		echo -ne "$days day(s) and $(date -u --date @$(($(date +%s) - $date1)) +%H:%M:%S)\r";
		sleep 0.1
	done
}
