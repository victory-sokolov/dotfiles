#!/bin/zsh
# shellcheck shell=bash

_has() # Check whether executable exists
{
    command -v "$1" >/dev/null 2>&1
}

latest() # Show latest created file
{
    ls -lt -d "$1"/*/ | head -n1 | awk '{print $NF}'
}

mkcd() # Create a new directory and enter it
{
  mkdir -p "$@"
  cd "$@" || exit
}

cdls() # Show contents of the directory after changing to it
{
    builtin cd "$1" || exit
    ls -ACF
}

backup() # Backup files and folders
{
	FILE=$1
	BACKUP_NAME="$FILE-[\"$(date + '%Y-%m-%d-%H:%M:%S')\"]"
	DIRECTORY="$HOME/backups"

	# Check if backup folder exists
	if [ ! -d "$DIRECTORY" ]; then
		mkdir "$DIRECTORY"
	fi

  	# check if passed argument is file or directory
	if [[ -d $FILE ]]; then
		echo "Creating backup of the directory: $FILE"
    	tar -czf "$DIRECTORY/$BACKUP_NAME.tar.gz" --exclude={"$FILE"/.venv,"$FILE"/node_modules} "$FILE"
	elif [[ -f $FILE ]]; then
		echo "Creating backup of the file: $FILE"
		cp -a "$FILE" "$DIRECTORY"
	else
		echo "$FILE is not valid format"
	fi
}

# Example: linecount js
linecount() # Count lines of a file with specific extension
{
    rg --files "*.$1" . | xargs wc -l
}

sort_remove() # Sort and remove dublicates lines
{
    vi +'%!sort | uniq' +wq "$1"
}

file_tolower() # Rename all items in a directory to lower case
{
    for i in *; do mv "$i" "${i,,}"; done
}

file_toupper() # Rename all files in a directory to upper case
{
    for i in *; do mv "$i" "${i^^}"; done
}

convert_datetime() # Convert DD/MM/YY date format to YYYY-MM-DD
{
    sed 's_\([0-9]\{1,2\}\)/\([0-9])'
}

remove_newlines() # Remove new lines from files and folder
{
    rename 's/[\r\n]//g' *
}

colormap() # Colormap
{
  for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
}

function man() # Shows pretty man page
{
  env \
    LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
    LESS_TERMCAP_md="$(printf '\e[1;31m')" \
    LESS_TERMCAP_me="$(printf '\e[0m')" \
    LESS_TERMCAP_se="$(printf '\e[0m')" \
    LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
    LESS_TERMCAP_ue="$(printf '\e[0m')" \
    LESS_TERMCAP_us="$(printf '\e[1;32m')" \
      man "$@"
}


targz() # Targz a file
{
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

cheat() # Cheatsheet function
{
  curl cheat.sh/${@:-cheat}
  # curl cheat.sh/$@
}

cview() # Read csv file
{
	csvtool readable "$1" | view -
}


short() # Shorten url
{
   url=$1
   curl -s http://tinyurl.com/api-create.php\?url\="$url" | xargs
}

lowerDir() # Lower all files in the current directory
{
    for i in *; do mv "$i" "$(echo "$i" | tr '[:upper:]' '[:lower:]')"; done
}

findEmpty() # Find empty files and directories in current directory
{
	find . -type f -exec bash -c 'if [ `cat "{}" |wc -w` -eq 0 ]; then echo "file - {}";fi' \; -or -empty -exec bash -c "echo dir - {}" \;
}

# from alex sexton:  gist.github.com/SlexAxton/4989674
gifify() # Video to GIF
{
    frames=5
    delay=16

  if [[ -n "$1" ]]; then
    # Extract file name without extension
    file=$(basename "$1")
    filename="${file%.*}"

    if [[ $2 == '--good' ]]; then
        ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
        time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=$delay --loop --optimize=3 --multifile - > "$filename.gif"
        # Remove PNG files if they exist
        if ls out-static-*.png 1> /dev/null 2>&1; then
          rm out-static*.png
        fi
    else
        ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r $frames -f gif - | gifsicle --optimize=3 --delay=$delay > "$filename.gif"
    fi
    else
        echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
    fi
}

fzf-down() {
    fzf --height 50% "$@"
}

fcd() # FZF with cd command 
{
  local DIR=$(
    fd --type d | fzf +m --select-1 --preview 'tree -C {} | head -n 50'
  )
  if [ -n "$DIR" ]; then
    cd "$DIR" || exit
  fi
}

ghexport() # Download single folder from github
{
	github_link=$1
	remove_path="/tree/master"
  	link="${github_link/$remove_path/trunk/}"
	svn export "${link}"
}

# Source: https://github.com/wesbos/dotfiles/blob/master/.zshrc#L28
touchh() # Create file in a nested directory
{
  mkdir -p "$(dirname "$1")" && touch "$1"
}

isup() # Check if URL is up
{
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		notify-send --urgency=critical "$uri is down"
	else
		notify-send --urgency=low "$uri is up"
	fi
}

clean-comments() # remove comments (#, //) and empty lines
{
	sed -i.tmp "/^s*[#;//]/d;/^$/d" "$1"
}

ssh-key() # generate ssh key with specific name
{
    name="$@"
    ssh-keygen -f ~/.ssh/"$name" -q -N ""
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/"$name"
    xclip -selection clipboard < ~/.ssh/"$name".pub
    echo "public key copied to clipboard"
}

# Python
server() # Start an HTTP server from a directory
{
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python3 -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

python_venv() # Auto active virtual environment
{
  ENV=./venv
  # when you cd into a folder that contains $ENV
  [[ -d $ENV ]] && source $ENV/bin/activate > /dev/null 2>&1
  # when you cd into a folder that doesn't
  [[ ! -d $ENV ]] && deactivate > /dev/null 2>&1
}

gpip() # Global PIP instllation
{
    PIP_REQUIRE_VIRTUALENV=false pip "$@"
}

mkenv() # create python virtual environment
{
    python3 -m venv .venv
    source .venv/bin/activate

    # if requirements.txt exists, install dependencies
	if [[ -f "requirements.txt" ]]; then
		pip install -r requirements.txt
    fi

    # install base packages
    pip install \
        black \
        flake8 \
        isort \
        pylint
}

prd() # Poetry reinstall package as dev dependencie
{
	poetry remove "$1"
	poetry add --dev "$1"
}

dj-watch-coverage() # Watch for Django test changes and run coverage
{
    rg --files --type-add 'python3:*.py' --type python3 | entr -s "
    poetry run python manage.py test
    poetry run coverage combine
    poetry run coverage html --skip-covered
    poetry run coverage report --fail-under 100
    "
}

dj-test() # Run Django unittests with coverage
{
    export DJANGO_ENV=test
    rm -rf ./htmlcov
    poetry run coverage run --parallel-mode --concurrency=multiprocessing manage.py test --parallel -v 2 --failfast
    poetry run coverage combine
    poetry run coverage html --skip-covered
    poetry run coverage report --fail-under 100
}

# Usage: json '{"foo":42}' or echo '{"foo":42}' | json
json() # Format json string
{
	if [ -t 0 ]; then # argument
		python3 -mjson.tool <<< "$*" | pygmentize -l javascript;
	else
		python3 -mjson.tool | pygmentize -l javascript;
	fi
}

token() # generate secret token
{
	length=${1:-16}  # Use provided length or default to 16
    python3 -c "import secrets; print(secrets.token_urlsafe(${length}))"
}

# Postgres
create-db() # Drop and re-create db if exists or create new one
{
    if [ "${#@}" -eq 0 ]; then
        echo "No DB name provided."
    else
        port=${2:-5432}
        dropdb -f --if-exists "$1"
        createdb -h 127.0.0.1 -p "$port" -U postgres "$1" 
        echo "Database $1 successfully re-created!"
    fi
}

delete-db() # Deletee database if exiss
{
    dropdb -f --if-exists "$@"
}

mysqldb() # MYSQL base commands (refresh, create, drop, list)
{
    if [ "$1" = "refresh" ]; then
        mysql -uroot -e "drop database $2; create database $2"
    elif [ "$1" = "create" ]; then
        mysql -uroot -e "create database $2"
    elif [ "$1" = "drop" ]; then
        mysql -uroot -e "drop database $2"
    elif [ "$1" = "list" ]; then
        mysql -uroot -e "show databases" | perl -p -e's/\|| *//g'
    fi
}

removebg() # Remove background from the image
{
	curl -H "X-API-Key: $REMOVEBG_KEY" \
       -F "image_file=@$1" \
       -F "size=auto" \
       -f https://api.remove.bg/v1.0/removebg -o no-bg.png
}

bash-file() # Create new shell file
{
  FILE_PATH=$1
  mkdir -p -- "$(dirname "$FILE_PATH")" && touch -- "$FILE_PATH"
  echo '#!/usr/bin/env bash' >> "$FILE_PATH"
  echo '' >> "$FILE_PATH"
  chmod +x "$FILE_PATH"
}

makerun() # Run makefile command
{
  local makefile_commands
  makefile_commands=$(grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' Makefile | awk 'BEGIN {FS = ":.*?## "}{printf "%-30s %s\n", $1, $2}' | fzf --height 50%)

  if [[ -n "$makefile_commands" ]]; then
    local selected_command
    selected_command=$(echo "$makefile_commands" | awk '{print $1}')
    echo "Running 'make $selected_command'"
    make "$selected_command"
  else
    echo "Exit: No command selected."
  fi
}

fnpm() # Run npm scripts interactively
{
    package_manager=$(get_node_package_manager)  

    if [ -f "package.json" ]; then
        scripts=$(jq -r '.scripts | keys | .[]' package.json | fzf --height 50%)

        if [[ -n "$scripts" ]]; then
            script_name=$(echo "$scripts" | awk '{gsub(/"/, ""); print}')
            echo "Running $package_manager run $script_name"
            "$package_manager" run "$script_name"
        else
            echo "Exit: You haven't selected any script"
        fi
    else
        echo "Exit: package.json not found"
    fi
}

repl() # Launch Repl for specified language using replit
{
	lang=$1

	if [ "$lang" = "python" ]; then
		lang="python3"
	elif [ "$lang" = "node" ]; then
		lang="nodejs"
	elif [ "$lang" = "java" ]; then
		lang="java10"
	elif [ "$lang" = "c#" ]; then
		lang="csharp"
	fi

	python3 -m webbrowser "https://replit.com/languages/$lang" &
}

lorem() # Generate Loremipsum text
{
	if [ "${1}" = "" ] || [ "${2}" = "" ]; then
		echo "Usage: loremipsum [paragraphs, sentences] [integer]"
	else
		curl -s "http://metaphorpsum.com/paragraphs/${1}/${2}" && printf "\n"
	fi
}

dataurl() # Create a data URL from a file
{
    local mimeType
	mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Source: http://superuser.com/questions/611538/is-there-a-way-to-display-a-countdown-or-stopwatch-timer-in-a-terminal
stopwatch() # Stopwatch, press enter to time.
{
	date1=$(date +%s);
	while :; do
		days=$(( $(($(date +%s) - date1)) / 86400 ))
		echo -ne "$days day(s) and $(date -u --date @$(($(date +%s) - $date1)) +%H:%M:%S)\r";
		sleep 0.1
	done
}

pngtojpg() # Bulk convert png to jpg
{
	for i in *.png ; do convert "$i" "${i%.*}.jpg" ; done
}

# C++ snippets
cpp-run() # compile and run executable
{
    echo "Compiling file..."
    g++ -o "$1" "$1.cpp"
    ./"$1".cpp
}

spy() # Watch file
{
    file=$1
    echo "Watching file ${file} 👀..."
    while true; do
        watch -n 1 -g -x cat "${file}" > /dev/null 2>&1
        echo "File ${file} changed"
    done
}

clean_deps() # Remove node, python, php dependencies
{
    folders=("node_modules" "venv" ".env" "vendor")
    days=${1:-90}

    for folder in "${folders[@]}"
    do
        find ~/dev -name "$folder" -type d -maxdepth 4 -mtime +"$days" -exec rm -rf {} \;
    done
}

# Source: https://kittygiraudel.com/snippets/groom-dead-code/
groom_dead_code() # Check whether files & folders in a given directory are imported in JavaScript files
{
  root="${2:-.}"
  for entry in "$1"/*
  do
    name=$(basename "$entry")
    if [[ -z "$(grep -r "/$name'" "$root")" ]]; then
      echo "$entry is unused"
    fi
  done
}

# Source: https://kittygiraudel.com/snippets/groom-dependencies/
groom_dependencies() # Check for unused dependencies
{
  key=${1:-dependencies}
  for dep in $(cat package.json | jq -cr ".$key|keys|.[]");
  do [[ -z "$(grep -r  --exclude-dir=node_modules "'${dep}" .)" ]] && echo "$dep appears unused";
  done
}

node-flush() # Reinstall node deps
{
    rm -rf node_modules/ build package.lock

    if [ -f "package-lock.json" ]; then
        npm i && npm start
    elif [ -f "yarn.lock" ]; then
        yarn install && yarn dev
    elif [ -f "pnpm-lock.yaml" ]; then
        pnpm install && pnpm start
    elses
        echo "Unable to determine the package manager"
    fi
}

# Get Node package manager
get_node_package_manager() {
    if [[ -f bun.lockb ]]; then
        echo "bun"
    elif [[ -f pnpm-lock.yaml ]]; then
        echo "pnpm"
    elif [[ -f yarn.lock ]]; then
        echo "yarn"
    elif [[ -f package-lock.json ]]; then
        echo "npm"
    else
        echo "pnpm"
    fi
}

p() # Determine package manager and run command with it
{
  if [[ -f bun.lockb ]]; then
    command bun "$@"
  elif [[ -f pnpm-lock.yaml ]]; then
    command pnpm "$@"
  elif [[ -f yarn.lock ]]; then
    command yarn "$@"
  elif [[ -f package-lock.json ]]; then
    command npm "$@"
  else
    command pnpm "$@"
  fi
}

install_latest_release() # Download and install latest release from Github
{
    repo=$1
    url=https://api.github.com/repos/$repo/releases/latest
    download_url="$(curl -s "$url" \
        | grep "browser_download_url.*deb\"" \
        | cut -d : -f 2,"3 \"
        | tr -d \" \
        | xa"rgs)"
    filename=$(basename "$download_url")
    echo "Downloading file: $download_url"
    wget -q "$download_url"
    sudo dpkg -i "$filename"
    rm "$filename"
}

upgrade-deps() # Upgrade global dependencies
{
    npx npm-check --global --update-all
    pip3 install --upgrade pip
    pip3 freeze | grep -v "^\-e" | grep -v "@" | cut -d = -f 1 | xargs pip3 install -U
}

timezsh() # Time ZSH load time
{
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time "$shell" -i -c exit; done
}

kport() # fzf kill process
{
    local pid
    pid=$(ps auxr | awk '{print $2,$3,$4,$11}' | column -t | fzf -m | awk '{print $1}')

    if [ "x$pid" != "x" ]
    then
        echo "$pid" | xargs kill -"${1:-9}"
        echo "Killed process $pid"
    fi
}

djtest() # Run Django tests interactively with fzf
{
    export DJANGO_ENV=test
    test_path=$1
    test_file=$(echo "$test_path" | tr '/' '.' | sed 's/\.py$//')
    python "$DOTFILES/scripts/python/get_class_methods.py" "$test_path" \
        | fzf \
        | xargs -I {} poetry run python manage.py test "$test_file".{}
}

fuzzyFavoriteCommand() # List favorited commands
{
    bookmarkedCommands=$((cat "$HOME"/.bookmark) | sed '/^s*$/d' | uniq | fzf); 
    echo "$bookmarkedCommands";
    eval "$bookmarkedCommands";
    history -s "$bookmarkedCommands"
}

addCommandToBookmarks() # Add new item to bookmark
{
    command=$@
    # description=$(grep "^function $command(" "$HOME/.functions" | sed 's/.*() # //g')

    echo "$command" >> "$HOME"/.bookmark;
    echo "Bookmarking '""$command""'";

    # remove duplicate records in bookmark
    perl -ne 'print unless $dup{$_}++;' ~/.bookmark > /tmp/syle-bookmark-temp;
    cat /tmp/syle-bookmark-temp > ~/.bookmark;
    rm /tmp/syle-bookmark-temp
}

brewdp() # Delete (one or multiple) selected application(s)
{
    local uninst=$(brew leaves | fzf -m)

    if [[ $uninst ]]; then
        for prog in $(echo "$uninst"); do brew uninstall "$prog"; done
    fi
}

brew_install() # Brew interactive install from Brewfile
{
  local brewfile="$DOTFILES/macos/Brewfile"
  local selected_command=$(rg -N -e '^brew ' "$brewfile" | fzf)
  if [ -n "$selected_command" ]; then
    brew install $(echo "$selected_command" | sed 's/#.*//')
  fi
}

brewip() # Install (one or multiple) selected application(s)
{
    local inst=$(brew search $@ | fzf -m)

    if [[ $inst ]]; then
        for prog in $(echo "$inst"); do brew install "$prog"; done
    fi
}

change_node_version() # Auto change node version with .nvm
{
    nvmrc="./.nvmrc"
    if [ -f "$nvmrc" ]; then
        version="$(cat "$nvmrc")"
        nvm use "$version"
    fi
}

duplicate_file() # Duplicates a file N times 
{
  if [ $# -ne 2 ]; then
    echo "Usage: duplicate_file_n_times <source_file> <number_of_duplicates>"
    return 1
  fi

  source_file="$1"
  number_of_duplicates="$2"

  if [ ! -e "$source_file" ]; then
    echo "Error: Source file '$source_file' not found."
    return 1
  fi

  if ! [[ "$number_of_duplicates" =~ ^[0-9]+$ ]]; then
    echo "Error: Invalid number of duplicates. Please provide a positive integer."
    return 1
  fi

  # Extract file extension
  file_extension="${source_file##*.}"

  # Duplicate the file 'n' times
  for ((i = 1; i <= number_of_duplicates; i++)); do
    cp "$source_file" "${source_file%.*}_duplicate_$i.$file_extension"
  done

  echo "File '$source_file' duplicated $number_of_duplicates times."
}

poetry-update() ## Update Poetry packages interactively
{
    poetry show --outdated -T | fzf -m | awk '{printf $1"@latest" " "}' | xargs -I {} poetry add {}
}

decryptpdf() # Decrypt PDF file
{
  echo "Enter password followed by <enter> followed by <ctrl-D>"
  qpdf --decrypt --password-file=- --replace-input "${1}"
}
