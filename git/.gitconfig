[user]
    name = Viktor Sokolov
    email = viktorsokolov.and@gmail.com
	signingkey = FAB76AB59DE3D70D

[include]
    path = ~/.gitconfig-local

[core]
    editor = vim
    logAllRefUpdates = true

    # Use custom .gitignore and .gitattribute files
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    # Path to githooks
    # hookspath="~/.githooks"

    pager = delta
    # Turn page off
    # pager = cat
    
    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Speed up commands involving untracked files such as `git status`.
    untrackedCache = true

[sequence]
    editor = code --wait

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[help]
    autocorrect = 20
    autocorrect = prompt

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[diff]
    # Detect copies as well as renames
    renames = copies
    tool = vscode
    indentHeuristic = true
    compactionHeuristic = true

[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[init]
    defaultBranch = main
    templatedir = ${DOTFILES}/git/templates

[interactive]
    diffFilter = delta --color-only --features=interactive

[add.interactive]
    useBuiltin = false # required for git 2.37.0

[delta]
    features = unobtrusive-line-numbers decorations
    max-line-length = 700
    syntax-theme = base16
    file-decoration-style = yellow ol ul
    file-style = bold yellow ul
    hunk-header-decoration-style = blue
    hunk-header-line-number-style = purple bold
    side-by-side = true
    navigate = true
    inspect-raw-lines = true
    true-color = always

[color]
    ui = auto

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = yellow
    changed = red

[pull]
    rebase = true
    ff = only

[push]
    default = current
    autoSetupRemote = true
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[merge]
    tool = opendiff
    renameLimit = 0
    prompt = false
    log = true
    
[rebase]
    autosquash = true

[commit]
    verbose = true
	template = ~/.gitmessage
	gpgsign = true

[rerere]
    autoupdate = true
    enabled = true

[rebase]
    autoSquash = true
    preserve = true

[checkout]
    defaultRemote = origin

[stash]
    showPatch = true

[branch "master"]
    mergeoptions = --no-edit

[branch]
    autosetuprebase = always
    autosetupmerge  = always

[grep]
    extendRegexp = true
    lineNumber = true

[alias]
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
    # Ignore repeated git command
    git = !exec git
    # Pull from main branch and remove merge branches
    sync = "!git switch main && git pull --prune && git rm-merged"
    a = add

    # Commit
    amend = 'commit --amend -m --no-edit'
    gc = 'commit -m'
    gca = 'commit -a'
    gcc = 'rev-list HEAD --count' # count amount of commits in the branch

    co = 'checkout'
    gcb = 'copy-branch-name'
    br = 'branch'
    wt = 'git worktree'
    # Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # check current Github PR's
    prs='hub pr list -L 20 -b develop --format="%t%n - Branch: [%H]%n - %U%n - %l%n%n"'
    gac = 'git add -A && git commit -m'
    ge = 'git-edit-new'
    gpom = 'git push origin master'
    gpf = 'git push --force-with-lease'
    lg = log --color --graph --stat --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # Show latest used branches based on the time of the most recent commit
    lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'
    current = rev-parse --abbrev-ref HEAD
    branchcleanup = !git remote prune origin
    # Remove all merge branches with master
    bclean = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # remove the file from git and from the history
    remove='git ls-files --ignored --exclude-standart | xargs -0 git rm -r'
    undo = reset HEAD~1
    # update all local branches. Sync with the target branch
    up = "!f() { git pull --all --rebase --autostash; git bclean; }; f"
    
    # Stash
    pop = stash pop
    st = 'git stash save --include-untracked'
    apply = stash apply
    sl = stash list --pretty=format:\"%C(bold red)%gd%C(dim yellow)%C(reset) %<(70,trunc)%s %C(green)(%ad)\"
    
    # Logging
    last = log -1 HEAD --stat
    recent = branch --sort=committerdate
    month = log --since='last month' --author="$(git config user.name)" --oneline
    # Check latest changes for specific file, requires single argument file path and --since argument
    latest-changes = "!read -p 'Enter the --since value (e.g., 2 weeks ago): ' since; git log --since=\"$since\" --follow --oneline -- \"$1\" | awk '{print $1}' | xargs -I{} git diff {}^..{} -- \"$1\""
    
    pf = "push --force-with-lease"
    # Fuzzy switch git branch
    fs = "!f() { git branch | grep $1 | xargs git switch; }; f"

    # Squash latest n commits. git squash 5
    squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B HEAD..HEAD@{1})\"; };f"

    # Rebasing stuff
    pr = pull --rebase
    ra = rebase --abort
    rc = rebase --continue

    # Checkout pull-request from github
    # Usage: git copr 123 - where 123 is pr number
    copr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && \
               git checkout pr/$1; }; f"

    # Ignoring file temporarily
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[[:lower:]]"

# URL shorthands

[url "ssh://git@github.com/"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    insteadOf = "https://github.com/"
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    recent = "{ count=$1; git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:=10} | column -ts'|'}; r"

[url "git@github.com:"]
    insteadOf = "gh:"
    insteadOf = https://github.com/

[url "https://gist.github.com/"]
    insteadOf = gist:

[url "https://bitbucket.org/"]
    insteadOf = "bb:"
    pushInsteadOf = "bitbucket:"
    
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
