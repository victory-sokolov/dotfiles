[user]
    name = Viktor Sokolov
    email = viktorsokolov.and@gmail.com

[core]
    editor = vim
    
    # Use custom .gitignore and .gitattribute files
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes
    # Path to githooks
    # hookspath="~/.githooks"

    pager = delta
    # Turn page off
    # pager = cat
    
    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Speed up commands involving untracked files such as `git status`.
    untrackedCache = true

[sequence]
    editor = code --wait

[help]
    autocorrect = 20
    autocorrect = prompt

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[diff]
    # Detect copies as well as renames
    renames = copies

[init]
    defaultBranch = main

[interactive]
    diffFilter = delta --color-only --features=interactive

[add.interactive]
    useBuiltin = false # required for git 2.37.0

[delta]
    max-line-length = 700
    syntax-theme = base16
    file-decoration-style = yellow ol ul
    file-style = bold yellow ul
    hunk-header-decoration-style = blue
    hunk-header-line-number-style = purple bold
    side-by-side = true
    navigate = true

[color]
    ui = auto

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = yellow
    changed = green

[push]
    default = current
    autoSetupRemote = true
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[merge]
    tool = opendiff
    renameLimit = 0
    prompt = false
    log = true
    
[commit]
    verbose = true
    # template = 

[rerere]
    autoupdate = true
    enabled = true

[rebase]
    autoSquash = true
    preserve = true

[checkout]
    defaultRemote = origin

[stash]
    showPatch = true

[branch "master"]
    mergeoptions = --no-edit

[alias]
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
    # Ignore repeated git command
    git = !exec git
    a = add
    amend = commit --amend -m
    gc = 'commit -m'
    gca = 'commit -a'
    co = 'checkout'
    gcb = 'copy-branch-name'
    br = 'branch'
    
    # Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    st = 'status'
    gac = 'git add -A && git commit -m'
    ge = 'git-edit-new'
    gpom = 'git push origin master'
    gpf = 'git push --force-with-lease'
    # Git stash with --include-untracked
    gs = 'git stash save --include-untracked'
    lg = log --color --graph --stat --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # Show latest used branches based on the time of the most recent commit
    lb = for-each-ref --sort='-authordate:iso8601' --format='%(authordate:relative)%09%(refname:short)' refs/heads
    current = rev-parse --abbrev-ref HEAD
    branchcleanup = !git remote prune origin
    # Remove all merge branches with master
    bclean = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    undo = reset HEAD~1
    pop = stash pop
    apply = stash apply
    sl = stash list --pretty=format:\"%C(bold red)%gd%C(dim yellow)%C(reset) %<(70,trunc)%s %C(green)(%ad)\"
    last = log -1 HEAD --stat
    recent = branch --sort=committerdate
    month = log --since='last month' --author="$(git config user.name)" --oneline
    # Check latest changes for specific file, requires single argument file path and --since argument
    latest-changes = "!read -p 'Enter the --since value (e.g., 2 weeks ago): ' since; git log --since=\"$since\" --follow --oneline -- \"$1\" | awk '{print $1}' | xargs -I{} git diff {}^..{} -- \"$1\""
    pf = push --force-with-lease

    # Squash latest n commits. git squash 5
    squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"


    # Rebasing stuff
    pr = pull --rebase
    ra = rebase --abort
    rc = rebase --continue

    # Checkout pull-request from github
    # Usage: git copr 123 - where 123 is pr number
    copr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && \
               git checkout pr/$1; }; f"

    # Ignoring file temporarily
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[[:lower:]]"

# URL shorthands

[url "ssh://git@github.com/"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    insteadOf = "https://github.com/"
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    recent = "{ count=$1; git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:=10} | column -ts'|'}; r"

[url "git@github.com:"]
    insteadOf = "gh:"
    insteadOf = https://github.com/

[url "https://gist.github.com/"]
    insteadOf = gist:

[url "https://bitbucket.org/"]
    insteadOf = "bb:"
    pushInsteadOf = "bitbucket:"
