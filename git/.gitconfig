[user]
    name = Viktor Sokolov
    email = viktorsokolov.and@gmail.com
	signingkey = FAB76AB59DE3D70D

[include]
    path = ~/.gitconfig-local

[core]
    editor = vim
    # Keeps track of all reference updates (branch checkouts, rebase operations) in the logs/refs directory
    logAllRefUpdates = true

    # When enabled (fsmonitor = true), Git uses an OS-specific monitoring tool to detect file changes, 
    # rather than scanning the entire directory structure. 
    # Significantly speed up performance on large repos by reducing the number of file lookups required.
    fsmonitor = true

    # Git will cache the state of untracked files, making subsequent checks faster. 
    # Useful for large repositories with many untracked files.
    untrackedcache = true

    # Git generates a graph of the commit history that improves the performance of commands like 
    # git log, git log --graph, and other history-related queries, especially in repo with many commits
    commitgraph = true

    # Use custom .gitignore and .gitattribute files
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    # Path to githooks
    # hookspath="~/.githooks"
    
    pager = delta
    
    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Speed up commands involving untracked files such as `git status`.
    untrackedCache = true

[sequence]
    editor = code --wait

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[help]
    autocorrect = 20
    autocorrect = prompt

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[feature]
    # better handle large repositories
    manyFiles = true

[fetch]
    writeCommitGraph = true

[diff]
    # Detect copies as well as renames
    renames = copies
    tool = vscode
    indentHeuristic = true
    compactionHeuristic = true
    algorithm = histogram

[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[init]
    # git init main branch by default
    defaultBranch = main
    templatedir = ${DOTFILES}/git/templates

[interactive]
    diffFilter = delta --color-only --features=interactive

[add.interactive]
    useBuiltin = false # required for git 2.37.0

[delta]
    features = unobtrusive-line-numbers decorations
    max-line-length = 700
    syntax-theme = base16
    file-decoration-style = yellow ol ul
    file-style = bold yellow ul
    hunk-header-decoration-style = blue
    hunk-header-line-number-style = purple bold
    side-by-side = true
    navigate = true
    inspect-raw-lines = true
    true-color = always

[color]
    ui = auto

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = yellow
    changed = red

[status]
    submoduleSummary = true

[pull]
    # rebase your local changes on top of the fetched changes when you run git pull
    # Instead of performing a default merge
    rebase = true
    # Perform fast-forward merge when pulling from the remote
    ff = only

[push]
    # git push when you push changes to a remote repository without specifying the branch explicitly
    default = current
    # Automatically set up tracking branches when you create a new branch based on a remote branch.
    autoSetupRemote = true
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[merge]
    tool = opendiff
    renameLimit = 0
    prompt = false
    log = true

    # 1. Automatically Create a Stash: If you have uncommitted changes in your working directory and run a command like git pull (which involves a merge or rebase), Git will temporarily stash those changes.
	# 2. Perform the Pull Operation: Git will then proceed with the pull, merge, or rebase as if the working directory were clean.
	# 3.Apply the Stash: After the pull operation is complete, Git will automatically reapply the stashed changes back to your working directory.
    autoStash = true
    
[rebase]
    # During an interactive rebase (git rebase -i), if you have commits with messages starting with fixup! or squash! 
    # followed by the subject of a previous commit, Git will:
	# - Reorder the commits so that fixup! or squash! commits come right after the commit they’re intended to modify.
	# - Combine these commits according to their type:
	#   - fixup! commits will be squashed without adding commit messages.
	#   - squash! commits will be squashed, but you’ll get a chance to edit the commit message.
    autosquash = true

    # enables automatic stashing of local changes when performing a rebase if there are uncommitted changes in the working directory
    autoStash = true

[commit]
    verbose = true
	template = ~/.gitmessage
	gpgsign = true

# The rerere (reuse recorded resolution) helps automate the process of resolving conflicts 
# that have been resolved before, which is especially useful in scenarios where conflicts happen repeatedly
[rerere]
    # enables the rerere feature
    enabled = true
    # automatically apply previously recorded resolutions to conflicts without prompting the user.
    autoupdate = true

[rebase]
    # automatically squash commits when performing a rebase if the commits have a specific format in their commit messages
    # if you have commits that are marked with a prefix of fixup! or squash!, 
    # Git will automatically apply the appropriate actions during the rebase process.
    autoSquash = true

    # Git will preserve your working directory changes when you start a rebase operation.
    # This means that any changes you have that are not yet committed will be kept intact.
    preserve = true

[checkout]
    defaultRemote = origin

[stash]
    # display a detailed patch (a diff) of changes when you create a new stash or view a list of existing stashes
    showPatch = true

[branch "master"]
    mergeoptions = --no-edit

[branch "main"]
    mergeoptions = --no-edit

[branch]
    # automatically set up a new branch to use rebase instead of merge when you create it based on a remote-tracking branch.
    autosetuprebase = always
    #autosetupmerge  = always

[grep]
    extendRegexp = true
    lineNumber = true

[alias]
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
    # Ignore repeated git command
    git = !exec git
    # Pull from main branch and remove merge branches
    sync = "!git switch main && git pull --prune && git rm-merged"
    a = add

    # Commit
    amend = 'commit --amend --no-edit'
    gc = 'commit -m'
    gca = 'commit -a'
    gcc = 'rev-list HEAD --count' # count amount of commits in the branch

    co = 'checkout'
    gcb = 'copy-branch-name'

    # Worktree
    wt = 'git worktree'

    # Blame
    # Tracks the last modification of each line in a file, ignoring whitespace-only changes (-w)
    # and recognizing moved code blocks that are at least 3% similar (-M3).
    blm = blame -w -M3 -- 

    # Branches
    br = 'branch'
    # Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"    
    # Show latest used branches based on the time of the most recent commit
    lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'
    # clean up local references to branches that have been deleted from the remote repository
    branchprune = !git remote prune origin
    # Remove all merged branches with master
    bclean = "!git branch --merged | grep -Ev '(^\\*|^\\+|master|main|dev)'"
    # List each branch and its last revision date
    branchdate = !git for-each-ref --sort='-authordate' --format='%(refname)%09%(authordate)' refs/heads | sed -e 's-refs/heads/--' | less
    # Copy current branch name, useful for updating package definitions to a locally modified copy
    branch-copy = !git rev-parse --abbrev-ref HEAD | tr -d '\n' | pbcopy
    # Show most recent created branches
    recent = "!f() { count=${1:-10}; git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=$count | column -ts'|'; }; f"

    # Stash
    pop = stash pop
    st = stash save --include-untracked
    apply = stash apply
    # Git stash list
    sl = stash list --pretty=format:\"%C(bold red)%gd%C(dim yellow)%C(reset) %<(70,trunc)%s %C(green)(%ad)\"
    
    # Logging
    # Log last commit
    last = log -1 HEAD --stat
    # Display all commits from the last month by the current Git user in a concise, one-line format
    month = "!f() { git log --since='last month' --author=\"$(git config user.name)\" --oneline; }; f"
    # Check latest changes for specific file, requires single argument file path and --since argument
    latest-changes = "!read -p 'Enter the --since value (e.g., 2 weeks ago): ' since; git log --since=\"$since\" --follow --oneline -- \"$1\" | awk '{print $1}' | xargs -I{} git diff {}^..{} -- \"$1\""
    lg = log --color --graph --stat --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # Checks for any unstaged changes in your working directory, clears the screen if there are changes, and then shows a detailed, one-shot summary of changes
    d = "!f() { git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat; }; f"

    # Check current Github PR's
    prs='hub pr list -L 20 -b develop --format="%t%n - Branch: [%H]%n - %U%n - %l%n%n"'
    gac = 'git add -A && git commit -m'
    ge = 'git-edit-new'
    gpom = 'git push origin master'
    gpf = 'git push --force-with-lease --force-if-includes'
    current = rev-parse --abbrev-ref HEAD
    # remove the file from git and from the history
    remove='git ls-files --ignored --exclude-standart | xargs -0 git rm -r'
    undo = reset HEAD~1
    # update all local branches. Sync with the target branch
    up = "!f() { git pull --all --rebase --autostash; git bclean; }; f"

    # Fuzzy switch git branch
    fs = "!f() { git branch | grep $1 | xargs git switch; }; f"

    # Squash latest n commits. git squash 5
    squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B HEAD..HEAD@{1})\"; };f"

    # Rebasing stuff
    pr = pull --rebase
    ra = rebase --abort
    rc = rebase --continue

    # Checkout pull-request from github
    # Usage: git copr 123 - where 123 is pr number
    copr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && \
            git checkout pr/$1; }; f"

    # Ignoring file temporarily
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[[:lower:]]"

    # churn: show log of files that have many changes
    #
    #   * Written by (Corey Haines)[http://coreyhaines.com/]
    #   * Scriptified by Gary Bernhardt
    #   * Obtained from https://github.com/garybernhardt/dotfiles/blob/master/bin/git-churn
    #   * Edited for sixarm_git_config repo by Joel Parker Henderson
    #   * Comments by Mislav http://mislav.uniqpath.com/2014/02/hidden-documentation/
    #
    # Show churn for whole repo:
    #
    #   $ git churn
    #
    # Show churn for specific directories:
    #
    #   $ git churn app lib
    #
    # Show churn for a time range:
    #
    #   $ git churn --since='1 month ago'
    #
    # These are all standard arguments to `git log`.
    #
    # It's possible to get valuable insight from history of a project not only
    # by viewing individual commits, but by analyzing sets of changes as a whole.
    # For instance, git-log-churn compiles stats about which files change the most.
    #
    # For example, to see where work on an app was focused on in the past month:
    #
    #     $ git churn --since='1 month ago' app/ | tail
    #
    # This can also highlight potential problems with technical debt in a project.
    # A specific file changing too often is generally a red flag, since it probably
    # means the file either needed to be frequently fixed for bugs, or the file
    # holds too much responsibility and should be split into smaller units.
    #
    # Similar methods of history analysis can be employed to see which people were
    # responsible recently for development of a certain part of the codebase.
    #
    # For instance, to see who contributed most to the API part of an application:
    #
    #    $ git log --format='%an' --since='1 month ago' app/controllers/api/ | \
    #      sort | uniq -c | sort -rn | head
    #
    #    109 Alice Anderson
    #    13 Bob Brown
    #    7 Carol Clark
    #
    churn = !git log --all --find-copies --find-renames --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count\tfile"} {print $1 "\t" $2}' | sort -g


# URL shorthands

[url "ssh://git@github.com/"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    insteadOf = "https://github.com/"

[url "git@github.com:"]
    insteadOf = "gh:"
    insteadOf = https://github.com/

[url "https://gist.github.com/"]
    insteadOf = gist:

[url "https://bitbucket.org/"]
    insteadOf = "bb:"
    pushInsteadOf = "bitbucket:"
    
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
